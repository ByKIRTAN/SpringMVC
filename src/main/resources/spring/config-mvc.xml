<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

       <mvc:annotation-driven/>

       <context:component-scan base-package="com.mcakir" />

       <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
       <mvc:resources mapping="/dist-#{appProps['application.version']}/**" location="/resources/" cache-period="86400"/>

       <!-- Helper class to configure Tiles 3.x for the Spring Framework -->
       <!-- See http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesConfigurer.html -->
       <!-- The actual tiles templates are in the tiles-definitions.xml  -->
       <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
              <property name="definitions">
                     <list>
                            <value>/WEB-INF/tiles-def.xml</value>
                     </list>
              </property>
       </bean>

       <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <property name="prefix" value="/WEB-INF/views/" />
              <property name="suffix" value=".jsp" />
       </bean>

       <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
              <!-- setting maximum upload size (10MB) -->
              <property name="maxUploadSize" value="10485760" />
       </bean>

       <!-- SpringMVC router -->
       <bean id="handlerMapping" class="org.resthub.web.springmvc.router.RouterHandlerMapping">
              <property name="routeFiles">
                     <list>
                            <value>classpath:routes.conf</value>
                            <!--
                                Router will *append* routes declared in additional files
                                <value>addroutes.conf</value>
                            -->
                     </list>
              </property>
              <property name="autoReloadEnabled" value="true" />
              <!--
                  Uncomment the following configuration line
                  if you want routes to be dynamically reloaded when
                  route files are modified.
                  Can be a good idea in dev mode, not so much in production!
              -->
              <!-- <property name="autoReloadEnabled" value="true" /> -->
       </bean>

</beans>